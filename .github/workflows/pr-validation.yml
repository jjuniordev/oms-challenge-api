name: PR Validation - Develop to Main

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET projects
      run: dotnet build --no-restore --configuration Release

    - name: Run .NET tests
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Install Frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run Frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Check for breaking changes
      id: breaking-changes
      run: |
        # Check if there are any breaking changes in API
        breaking_changes=""
        
        # Check for removed endpoints or major version changes
        if git diff main..HEAD --name-only | grep -E "(Controller|Program\.cs)" > /dev/null; then
          echo "‚ö†Ô∏è API files modified - Manual review required"
          breaking_changes="api-modified"
        fi
        
        # Check for database migrations
        if git diff main..HEAD --name-only | grep -E "Migrations/" > /dev/null; then
          echo "üóÑÔ∏è Database migrations detected"
          breaking_changes="${breaking_changes},migrations"
        fi
        
        echo "breaking_changes=$breaking_changes" >> $GITHUB_OUTPUT

    - name: Add PR validation comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ü§ñ Automated PR Validation')
          );
          
          const breakingChanges = '${{ steps.breaking-changes.outputs.breaking_changes }}';
          
          let validationStatus = '‚úÖ **All validations passed!**';
          let additionalInfo = '';
          
          if (breakingChanges.includes('api-modified')) {
            validationStatus = '‚ö†Ô∏è **Manual review required**';
            additionalInfo += '\n- üîç API files modified - requires careful review';
          }
          
          if (breakingChanges.includes('migrations')) {
            additionalInfo += '\n- üóÑÔ∏è Database migrations detected - verify compatibility';
          }
          
          const commentBody = `## ü§ñ Automated PR Validation
          
          ${validationStatus}
          
          ### ‚úÖ Checks Completed:
          - ‚úÖ .NET build successful
          - ‚úÖ .NET tests passed
          - ‚úÖ Frontend build successful  
          - ‚úÖ Frontend tests passed
          
          ${additionalInfo ? '### ‚ö†Ô∏è Additional Notes:' + additionalInfo : ''}
          
          ### üìä PR Summary:
          - **Target:** \`main\` ‚Üê \`develop\`
          - **Commits:** ${context.payload.pull_request.commits} commit(s)
          - **Files changed:** ${context.payload.pull_request.changed_files} file(s)
          - **Additions:** +${context.payload.pull_request.additions} lines
          - **Deletions:** -${context.payload.pull_request.deletions} lines
          
          ---
          *Last updated: ${new Date().toISOString()}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for high severity vulnerabilities
      run: |
        if trivy fs --severity HIGH,CRITICAL --quiet .; then
          echo "‚úÖ No high severity vulnerabilities found"
        else
          echo "‚ö†Ô∏è High severity vulnerabilities detected - review required"
          exit 1
        fi
